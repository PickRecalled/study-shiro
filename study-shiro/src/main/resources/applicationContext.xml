<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	<!--
		1. 配置 SecurityManager
	-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"/>
		<property name="authenticator" ref="authenticator"/>
		<property name="realms">
			<list>
				<ref bean="md5Realm"/>
				<ref bean="sha1Realm"/>
			</list>
		</property>
	</bean>

	<!--
		2. 配置 CacheManager.
		2.1 需要加入 ehcache 的 jar 包及配置文件.
	-->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

	<!-- 多Realm的认证器 -->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<!-- 配置Realm的认证策略 -->
		<property name="authenticationStrategy">
			<!--
				FirstSuccessfulStrategy：只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信息，其他的忽略；
				AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy 不同，将返回所有Realm身份验证成功的认证信息；
				AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。
			-->
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>

	<!--
		3. 配置 Realm
		3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
	-->
	<bean id="md5Realm" class="com.summer.shiro.realms.Md5Realm">
		<!-- 配置凭证匹配器 -->
		<property name="credentialsMatcher">
			<!-- 指定加密次数为1024次与MD5加密方式的HashedCredentialsMatcher -->
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"/>
				<property name="hashIterations" value="1024"/>
			</bean>
		</property>
	</bean>

	<bean id="sha1Realm" class="com.summer.shiro.realms.Sha1Realm">
		<!-- 配置凭证匹配器 -->
		<property name="credentialsMatcher">
			<!-- 指定加密次数为1024次与SHA1加密方式的HashedCredentialsMatcher -->
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA1"/>
				<property name="hashIterations" value="1024"/>
			</bean>
		</property>
	</bean>

	<!--
		注：下面的配置需要放到spring-mvc.xml配置文件中Shiro的注解才能生效
		4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.

		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

		5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.

		<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>


	<!--
		6. 配置 ShiroFilter.
		6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
		若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/login.jsp"/>
		<property name="successUrl" value="/list.jsp"/>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>
		<!--
			6.2 配置哪些页面需要受保护，以及访问这些页面需要的权限.
			1). anon 可以被匿名访问
			2). authc 必须认证(即登录)后才可能访问的页面.
			3). logout 登出.
			4). roles 角色过滤器
		-->
		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/shiro/login = anon
				/shiro/logout = logout
				/admin.jsp = roles[admin]
				/user.jsp = roles[user]
				# everything else requires authentication:
				/** = authc
			</value>
		</property>
	</bean>
</beans>
